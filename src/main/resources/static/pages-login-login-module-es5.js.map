{"version":3,"sources":["webpack:///src/app/pages/login/login.module.ts","webpack:///src/app/pages/login/login-routing.module.ts","webpack:///src/app/pages/login/login.page.ts","webpack:///src/app/pages/login/login.page.html"],"names":["LoginModule","declarations","imports","routes","path","component","LoginRoutingModule","forChild","exports","LoginPage","router","authService","isLoading","isError","errorMessage","year","Date","getFullYear","loginForm","username","required","password","valid","login","value","subscribe","res","navigate","err","status","serverMessage","error","message","details","Array","join","get","onLogin","selector","templateUrl","styleUrls"],"mappings":"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","file":"pages-login-login-module-es5.js","sourcesContent":["import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\n\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { LoginRoutingModule } from './login-routing.module';\r\nimport { LoginPage } from './login.page';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  declarations: [LoginPage],\r\n  imports: [\r\n    CommonModule,\r\n    LoginRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n\r\n  ]\r\n})\r\nexport class LoginModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LoginPage } from './login.page';\r\n\r\n\r\nconst routes: Routes = [\r\n\r\n  {path:'', component: LoginPage},\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginRoutingModule { }\r\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { AuthService } from 'src/app/common/auth.service';\r\nimport { ValidationError } from 'src/app/data/validation-error';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.page.html',\r\n  styleUrls: ['./login.page.css'],\r\n})\r\n// tslint:disable-next-line: component-class-suffix\r\nexport class LoginPage implements OnInit {\r\n\r\n  loginForm: FormGroup;\r\n  isLoading = false;\r\n  isError = false;\r\n  errorMessage = '';\r\n\r\n  year: number = new Date().getFullYear();\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private authService: AuthService) { }\r\n\r\n  // tslint:disable-next-line: typedef\r\n  ngOnInit() {\r\n    this.loginForm = new FormGroup({\r\n      username: new FormControl(null, [Validators.required]),\r\n      password: new FormControl(null, [Validators.required]),\r\n    });\r\n  }\r\n\r\n  // tslint:disable-next-line: typedef\r\n  onLogin(){\r\n    if (this.loginForm.valid) {\r\n      this.isLoading = true;\r\n      this.isError = false;\r\n      this.authService.login({password: this.password.value, username: this.username.value}).subscribe((res) => {\r\n        this.isLoading = false;\r\n        this.router.navigate(['/', 'dashboard']);\r\n      }, err => {\r\n        this.isLoading = false;\r\n        this.isError = true;\r\n        if (err.status === 0) {\r\n\r\n          this.errorMessage = 'An unknown Error occurred';\r\n        } else if (err.status === 400) {\r\n          const serverMessage = err.error as ValidationError;\r\n          this.errorMessage = `${serverMessage.message}\\n${serverMessage?.details}` ;\r\n        } else {\r\n          const serverMessage = err.error;\r\n          if (serverMessage?.message instanceof Array) {\r\n            this.errorMessage = serverMessage.message.join('<br>');\r\n          } else {\r\n            this.errorMessage = serverMessage.message;\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // tslint:disable-next-line: typedef\r\n  get username() {\r\n    return this.loginForm.get('username');\r\n  }\r\n\r\n  // tslint:disable-next-line: typedef\r\n  get password() {\r\n    return this.loginForm.get('password');\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n","<!-- <div class=\"login-container\">\r\n    <div >\r\n\r\n        <div >\r\n            <form class=\"form_common f\" [formGroup]=\"loginForm\" (ngSubmit)=\"onLogin()\">\r\n                <img alt=\"\" src=\"./assets/img/Neptune.png\" width=\"75%\" >\r\n                <img alt=\"\" src=\"../../../assets/img/download-removebg-preview.png\" width=\"75%\" >\r\n                <br>\r\n                <br>\r\n                <br>\r\n                <div class=\"error\" *ngIf=\"isError\">\r\n                    <p>{{errorMessage}}</p>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <input type=\"text\" autocomplete=\"username\" required class=\"form-control input-lg input_common \" placeholder=\"Username\" formControlName=\"username\" id=\"username\" >\r\n                </div>\r\n\r\n                <br>\r\n\r\n                <div class=\"form-group\">\r\n                    <input type=\"password\" autocomplete=\"current-password\" required class=\"form-control input-lg input_common\" placeholder=\"Password\" formControlName=\"password\" id=\"password\">\r\n                </div>\r\n\r\n                <br>\r\n\r\n                <div class=\"text-center\">\r\n                    <button type=\"submit\" class=\"btn btn-lg btn-primary btn-block btn_common\" [disabled]=\"!loginForm.valid || isLoading\">\r\n                        <div class=\"loadingSpinner\" *ngIf=\"isLoading\"></div>\r\n                        <span *ngIf=\"!isLoading\">Login</span>\r\n                    </button>\r\n                </div>\r\n            </form>\r\n\r\n            <div class=\"copyright\">\r\n                {{ year }} &copy; Rubikon-Efass by Neptune Software Group.\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n</div>\r\n -->\r\n<body>\r\n <div class=\"login-container\">\r\n    <div >\r\n        <div >\r\n            <form class=\"form_common f\" [formGroup]=\"loginForm\" (ngSubmit)=\"onLogin()\">\r\n                <!-- <img alt=\"\"  src=\"../../../assets/img/Neptune.png\" width=\"75%\" > -->\r\n                <!-- <img alt=\"\"  src=\"../../../assets/img/download-removebg-preview.png\" width=\"75%\" > -->\r\n                <div class=\"logo_container\">\r\n                 <img class=\"boi_logo\" alt=\"\"  src=\"../../../assets/img/BOI_LOGO.png\">\r\n                 <p>Bank of Industry</p>\r\n                 </div>\r\n                <br>\r\n                <div class=\"error\" *ngIf=\"isError\">\r\n                    <p>{{errorMessage}}</p>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <input type=\"text\" autocomplete=\"username\" required class=\"form-control input-lg input_common \" placeholder=\"Username\" formControlName=\"username\" id=\"username\" >\r\n                </div>\r\n\r\n                <br>\r\n\r\n                <div class=\"form-group\">\r\n                    <input type=\"password\" autocomplete=\"current-password\" required class=\"form-control input-lg input_common\" placeholder=\"Password\" formControlName=\"password\" id=\"password\">\r\n                </div>\r\n\r\n                <br>\r\n\r\n                <div class=\"text-center\">\r\n                    <button type=\"submit\" class=\"customButton\" [disabled]=\"!loginForm.valid || isLoading\">\r\n                        <div class=\"loadingSpinner\" *ngIf=\"isLoading\"></div>\r\n                        <span *ngIf=\"!isLoading\">Login</span>\r\n                    </button>\r\n                </div>\r\n            </form>\r\n\r\n            <div class=\"copyright\">\r\n                {{ year }} &copy; Efass by Neptune Software Group.\r\n            </div>\r\n\r\n        </div>\r\n    </div>\r\n</div>\r\n</body>\r\n\r\n\r\n"]}