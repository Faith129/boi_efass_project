{"version":3,"sources":["webpack:///src/app/common/input-validator.validator.ts","webpack:///src/app/pages/user-settings/update-password/update-password.component.ts","webpack:///src/app/pages/user-settings/update-password/update-password.component.html","webpack:///src/app/pages/user-settings/update-password/update-password.module.ts"],"names":["CustomValidator","verifyControl","controlName","control","setErrors","passwordNoMatch","compare","get","value","UpdatePasswordComponent","authService","userSettingsService","isLoading","updatePasswordForm","password","required","minLength","newPassword","confirmNewPassword","validators","comparePassword","timeIntervalId","setInterval","nowDate","Date","$user","user","subscribe","username","valid","body","old_password","confirm_password","updatePassword","response","reset","title","text","icon","err","errorMessage","status","serverMessage","error","message","details","Array","join","clearInterval","unsubscribe","changePassword","selector","templateUrl","styleUrls","routes","path","component","UpdatePasswordModule","forChild","declarations","imports"],"mappings":"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","file":"update-password-update-password-module-es5.js","sourcesContent":["import { ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nexport class CustomValidator {\r\n\r\n    static comparePassword(verifyControl: string, controlName = 'password'): ValidatorFn  {\r\n        return (control: AbstractControl): {[key: string]: boolean} | null => {\r\n            control.setErrors({passwordNoMatch: true });\r\n            const compare = control.get(controlName).value === control.get(verifyControl).value;\r\n            return compare ? null : {passwordNoMatch: true };\r\n        };\r\n    }\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { AuthService } from 'src/app/common/auth.service';\r\nimport { CustomValidator } from 'src/app/common/input-validator.validator';\r\nimport { ValidationError } from 'src/app/data/validation-error';\r\nimport swal from 'sweetalert';\r\nimport { UserSettingsService } from '../user-settings.service';\r\n\r\n@Component({\r\n  selector: 'app-update-password',\r\n  templateUrl: './update-password.component.html',\r\n  styleUrls: ['./update-password.component.css']\r\n})\r\nexport class UpdatePasswordComponent implements OnInit, OnDestroy {\r\n\r\n  username: string;\r\n  $user: Subscription;\r\n  timeIntervalId: any;\r\n  nowDate: Date;\r\n  updatePasswordForm: FormGroup;\r\n  isLoading = false;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private userSettingsService: UserSettingsService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.updatePasswordForm = new FormGroup({\r\n      password: new FormControl(null, [Validators.required, Validators.minLength(6)]),\r\n      newPassword: new FormControl(null, [Validators.required, Validators.minLength(6)]),\r\n      confirmNewPassword: new FormControl(null, [Validators.required, Validators.minLength(6)]),\r\n    }, {validators: [CustomValidator.comparePassword('confirmNewPassword', 'newPassword')]});\r\n\r\n    this.timeIntervalId = setInterval(() => {\r\n      this.nowDate = new Date();\r\n    }, 1000);\r\n\r\n    this.$user = this.authService.user.subscribe(user => {\r\n      this.username = user?.username;\r\n    });\r\n  }\r\n\r\n  changePassword() {\r\n    if (this.updatePasswordForm.valid) {\r\n      const body = {\r\n        username: this.username,\r\n        old_password: this.password.value,\r\n        password: this.newPassword.value,\r\n        confirm_password: this.confirmNewPassword.value\r\n      };\r\n\r\n      this.isLoading = true;\r\n      this.userSettingsService.updatePassword(body).subscribe((response) => {\r\n        this.isLoading = false;\r\n        this.updatePasswordForm.reset();\r\n        swal({\r\n          title: 'Successful',\r\n          text: 'Password updated',\r\n          icon: 'success'\r\n        });\r\n      }, (err) => {\r\n        this.isLoading = false;\r\n        this.updatePasswordForm.reset();\r\n        let errorMessage = 'An unknown Error occurred';\r\n        if (err.status === 0) {\r\n          errorMessage = 'An unknown Error occurred';\r\n        } else if (err.status === 400) {\r\n          const serverMessage = err.error as ValidationError;\r\n          errorMessage = `${serverMessage.message}\\n${serverMessage?.details}` ;\r\n        } else {\r\n          const serverMessage = err.error;\r\n          if (serverMessage?.message instanceof Array) {\r\n            errorMessage = serverMessage.message.join('<br>');\r\n          } else {\r\n            errorMessage = serverMessage?.message || errorMessage;\r\n          }\r\n        }\r\n        swal({\r\n          title: 'Error',\r\n          text: errorMessage,\r\n          icon: 'error'\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  get password() {\r\n    return this.updatePasswordForm.get('password');\r\n  }\r\n\r\n  get newPassword() {\r\n    return this.updatePasswordForm.get('newPassword');\r\n  }\r\n\r\n  get confirmNewPassword() {\r\n    return this.updatePasswordForm.get('confirmNewPassword');\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    clearInterval(this.timeIntervalId);\r\n\r\n    if (this.$user) {\r\n      this.$user.unsubscribe();\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"page-header\" style=\"padding: 20px 20px;\">\r\n    <h1>\r\n      Settings <small>Update &amp; password </small>\r\n    </h1>\r\n  </div>\r\n\r\n  <div class=\"container\">\r\n\r\n  <div class=\"panel panel-default\">\r\n    <div class=\"panel-heading\">\r\n    <i class=\"fa fa-external-link-square\"></i>Profile\r\n    \r\n    </div>\r\n    <div class=\"panel-body\">\r\n    <div class=\"col-sm-9\">\r\n    <b style=\"color: gray; font-size: 15px;\">\r\n    USERNAME: </b> <b style=\"color: gray; font-size: 15px;\">{{username | titlecase}}</b>\r\n    \r\n    <div class=\"form-group\">\r\n    <b style=\"color: gray; font-size: 15px;\">\r\n    DATE: </b> <b>{{nowDate | date:'medium'}}</b>\r\n    </div>\r\n    </div>\r\n    <br>\r\n    \r\n    <!-- end: PAGE TITLE & BREADCRUMB -->\r\n    </div>\r\n    </div>\r\n\r\n          \r\n  </div>\r\n\r\n  \r\n<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-12 col-sm-6\">\r\n        <!-- start: TEXT FIELDS PANEL -->\r\n        <div class=\"panel panel-default\">\r\n        <div class=\"panel-heading\">\r\n        <i class=\"fa fa-external-link-square\"></i>Password Informatiom\r\n        \r\n        </div>\r\n        <div class=\"panel-body\">\r\n        \r\n        <form role=\"form\" class=\"form-horizontal\" [formGroup]=\"updatePasswordForm\" (ngSubmit)=\"changePassword()\">\r\n        \r\n        \r\n        <div class=\"form-group\">\r\n        <label class=\"col-sm-2 control-label\" for=\"form-field-2\">\r\n        Current Password </label>\r\n        <div class=\"col-sm-9\">\r\n            <input type=\"password\" placeholder=\"Password\" id=\"password\" class=\"form-control\"\r\n                formControlName=\"password\" autocomplete=\"new-password\"\r\n            >\r\n            <span class=\"error\" *ngIf=\"password.touched && password.hasError('required')\"> Password required</span>\r\n            <span class=\"error\" *ngIf=\"password.touched && password.hasError('minlength')\"> Enter minimum of 6 characters</span>\r\n        </div>\r\n        </div>\r\n        \r\n        <div class=\"form-group\">\r\n        <label class=\"col-sm-2 control-label\" for=\"form-field-2\">\r\n        New Password </label>\r\n        <div class=\"col-sm-9\">\r\n            <input type=\"password\" placeholder=\"New Password\" id=\"newPassword\" class=\"form-control\" autocomplete=\"new-password\" formControlName=\"newPassword\">\r\n            <span class=\"error\" *ngIf=\"newPassword.touched && newPassword.hasError('required')\">New Password required</span>\r\n            <span class=\"error\" *ngIf=\"newPassword.touched && newPassword.hasError('minlength')\"> Enter minimum of 6 characters</span>\r\n        </div>\r\n        </div>\r\n        \r\n        <div class=\"form-group\">\r\n        <label class=\"col-sm-2 control-label\" for=\"form-field-2\">\r\n        Confirm Password </label>\r\n        <div class=\"col-sm-9\">\r\n            <input type=\"password\" placeholder=\"Confirm New Password\" id=\"confirmNewPassword\" class=\"form-control\" \r\n                formControlName=\"confirmNewPassword\" autocomplete=\"new-password\"\r\n            >\r\n            <span class=\"error\" *ngIf=\"confirmNewPassword.touched && confirmNewPassword.hasError('required')\">Confirm Password required</span>\r\n            <span class=\"error\" *ngIf=\"confirmNewPassword.touched && confirmNewPassword.hasError('minlength')\"> Enter minimum of 6 characters</span>\r\n            <span class=\"error\" *ngIf=\"confirmNewPassword.touched && updatePasswordForm.hasError('passwordNoMatch')\"> input doesn't match with new password</span>\r\n        </div>\r\n        </div>\r\n        \r\n        <br> <br>\r\n        \r\n        \r\n        \r\n        <div class=\"form-group\">\r\n        <label class=\"col-sm-2 control-label\" for=\"form-field-2\">\r\n        \r\n        </label>\r\n        <div class=\"col-sm-9\">\r\n        <button class=\"btn btn-primary btn-block\" type=\"submit\" [disabled]=\"updatePasswordForm.invalid || isLoading\">\r\n            <div class=\"loadingSpinner\" *ngIf=\"isLoading\"></div>\r\n            <span *ngIf=\"!isLoading\">Save</span>\r\n        </button>\r\n        </div>\r\n        </div>\r\n        </form>\r\n        </div>\r\n        </div>\r\n        \r\n        \r\n        \r\n        </div>\r\n        \r\n        \r\n        \r\n        \r\n        <!-- end: PAGE TITLE & BREADCRUMB -->\r\n    </div>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UpdatePasswordComponent } from './update-password.component';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nconst routes: Routes = [\r\n  {path: '', component: UpdatePasswordComponent}\r\n];\r\n\r\n@NgModule({\r\n  declarations: [UpdatePasswordComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    ReactiveFormsModule\r\n  ]\r\n})\r\nexport class UpdatePasswordModule { }\r\n"]}